from tkinter import *
from math import sqrt
from tkinter.filedialog import askopenfilename
import math
import csv
import numpy as np

x_koor = []
y_koor = []
labx = []
laby = []
counter = 0
points_counter = 0
line_counter = 0
tl = 0
tln = 0
bln = 0
v = ""


def teget():
    global x
    global y
    global counter
    x_koor.append(int(x.get()) + 500)
    y_koor.append(400 - int(y.get()))
    labx.append(int(x.get()))
    laby.append(int(y.get()))
    counter = counter + 1

    x_label.config(text=labx)
    y_label.config(text=laby)
    z_label.config(text=counter)
    if counter > 0:
        canv.create_oval(x_koor[counter - 1] + 1, y_koor[counter - 1] - 1, x_koor[counter - 1] + 1,
                         y_koor[counter - 1] - 1,
                         outline="black", fill="blue", width=2)
    line = canv.find_all()
    line_label.config(text=line)


def csv_read():
    global x
    global y
    global counter
    csv_file_path = askopenfilename()
    with open(csv_file_path) as f:
        reader = csv.reader(f, delimiter="\t")
        for i, line in enumerate(reader):
            print('line[{}] = {}'.format(i, line))
            x_koor.append(int(line[0]) + 500)
            y_koor.append(400 - int(line[1]))
            labx.append(int(line[0]))
            laby.append(int(line[1]))
            counter = counter + 1
            canv.create_oval(x_koor[counter - 1] + 1, y_koor[counter - 1] - 1, x_koor[counter - 1] + 1,
                             y_koor[counter - 1] - 1,
                             outline="black", fill="blue", width=2)
    x_label.config(text=labx)
    y_label.config(text=laby)
    z_label.config(text=counter)
    line = canv.find_all()
    line_label.config(text=line)
    print()


def deleting():  # удаление значений массива, нарисованных линий, обнуление counter'a
    global counter
    global line
    global x_koor
    global y_koor
    counter = 0
    x_koor.clear()
    y_koor.clear()
    line = canv.find_all()
    for i in range(2, len(line)):
        canv.delete(line[i])

    z_label.config(text="0")
    y_label.config(text="")
    x_label.config(text="")
    lenline_label.config(text=" ")
    testline_label.config(text=" ")
    branchline_label.config(text=" ")


def lining():  # функия нахождение длины линии и создание линейной последовательности линий между точками
    global counter
    global tl
    global line
    global points_counter
    tl = 0
    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1,
                             y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)

    for points_counter in range(0, counter - 1):
        canv.create_line(x_koor[points_counter], y_koor[points_counter], x_koor[points_counter + 1],
                         y_koor[points_counter + 1])

        tl = tl + sqrt((x_koor[points_counter] - x_koor[points_counter + 1]) * (
                    x_koor[points_counter] - x_koor[points_counter + 1]) +
                       (y_koor[points_counter] - y_koor[points_counter + 1]) * (
                                   y_koor[points_counter] - y_koor[points_counter + 1]))
    tl = tl + sqrt((x_koor[counter - 1] - x_koor[0]) * (x_koor[counter - 1] - x_koor[0]) +
                   (y_koor[counter - 1] - y_koor[0]) * (y_koor[counter - 1] - y_koor[0]))
    canv.create_line(x_koor[counter - 1], y_koor[counter - 1], x_koor[0], y_koor[0])

    line = canv.find_all()
    lenline_label.config(text=tl)
    line_label.config(text=line)


def nearest():
    global line
    global tln
    tln = 0
    global counter
    graph = []
    min = 1000000
    min_point = 0
    binar_counter = 0
    global length_nearest
    binar = []
    for i in range(counter):
        binar.append(0)
    binar[0] = 1
    print('бинар ', binar)

    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1,
                             y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)

    for z in range(0, len(binar)):
        for i in range(0, len(binar)):
            graph.append(sqrt((x_koor[binar_counter] - x_koor[i]) ** 2 + (y_koor[binar_counter] - y_koor[i]) ** 2))

        print('графы ', graph)
        print('бинар ', binar)
        for j in range(0, len(graph)):
            if graph[j] < min:
                if binar[j] == 0:
                    min_point = j
                    min = graph[j]
        tln = tln + min
        canv.create_line(x_koor[min_point], y_koor[min_point], x_koor[binar_counter], y_koor[binar_counter], fill='red',
                         width=1)
        print('min = ', min)
        print('min_point = ', min_point)
        binar[min_point] = 1
        print('длина ', tln)

        binar_counter = min_point
        graph.clear()
        min = 1000000

    tln = tln + (sqrt((x_koor[binar_counter] - x_koor[0]) ** 2 + (y_koor[binar_counter] - y_koor[0]) ** 2))
    canv.create_line((x_koor[0], y_koor[0], x_koor[binar_counter], y_koor[binar_counter]), fill='red', width=1)
    tln = tln - 1000000
    print('длина ', tln)

    line = canv.find_all()
    testline_label.config(text=tln)


def branch_and_bound():
    global counter
    global line
    min_point = 0
    global bln
    min_masx = []
    min_masy = []
    min_masx.append(x_koor[0])
    min_masy.append(y_koor[0])
    binar = []
    minhor = []
    minver = []
    localbound = 0
    x_koor1 = []
    y_koor1 = []

    # корневое решение
    for i in range(counter):
        binar.append(0)
    binar[0] = 1

    branch = [0] * len(binar)
    for i in range(len(binar)):
        branch[i] = [0] * counter

    for i in range(counter):
        x_koor1.append(x_koor[i])
        y_koor1.append(y_koor[i])

    branch = np.zeros([len(x_koor1), len(x_koor1)])  # Шаблон матрицы
    for i in np.arange(0, len(x_koor1), 1):
        for j in np.arange(0, len(x_koor1), 1):
            if i != j:
                branch[i, j] = sqrt((x_koor1[i] - x_koor1[j]) ** 2
                                    + (y_koor1[i] - y_koor1[j]) ** 2)

                # Заполнение матрицы
            else:
                branch[i, j] = float('inf')  # Заполнение главной
                # Вывод матрицы
    for i in range(len(branch)):
        for j in range(len(branch)):
            if i != j:
                q = (branch[i][j])
                qq = math.trunc(q)
                print(' ', qq, end="")
            else:
                print(' inf', end="")

        # Нахождение минимума строки
        minh = 10000000
        for i1 in range(len(branch)):
            if (branch[i][i1] < minh):
                minh = branch[i][i1]
        minhor.append(minh)
        localbound = localbound + minh
        minh = math.trunc(minh)
        print(' |  min = ', minh, end="")
        print('\n')

    branch_not_change = branch.copy()

    print('ПолуУпрощенная матрица', '\n')
    for i in range(len(branch)):
        for j in range(len(branch)):
            branch[i][j] = branch[i][j] - minhor[i]

    for i in range(len(branch)):
        for j in range(len(branch)):
            if i != j:
                q = (branch[i][j])
                qq = math.trunc(q)
                print(' ', qq, end="")
            else:
                print(' inf', end="")
        print('\n')
    for i in range(len(binar)):
        print('  - ', end="")
    print('\n')
    # нахождение минимума столбца
    for i in range(len(branch)):
        minv = 1000000
        for j in range(len(branch)):
            if (branch[j][i] < minv):
                minv = branch[j][i]
        minver.append(minv)
        localbound = localbound + minv
        q = (minv)
        qq = math.trunc(q)
        print(' ', qq, end="")
    print('\n')
    print('Упрощенная матрица', '\n')
    for i in range(len(branch)):
        for j in range(len(branch)):
            branch[j][i] = branch[j][i] - minver[i]

    for i in range(len(branch)):
        for j in range(len(branch)):
            if i != j:
                q = (branch[i][j])
                qq = math.trunc(q)
                print(' ', qq, end="")
            else:
                print(' inf', end="")
        print('\n')
    qq = math.trunc(localbound)
    print('Локальная нижняя граница = ', qq)

    # поиск нулевых клеток
    nul = 0
    max = 0
    for i in range(len(branch)):
        for j in range(len(branch)):
            if i != j:
                q = (branch[i][j])
                qq = math.trunc(q)
                print(' ', qq, end="")
            else:
                print(' inf', end="")
            if (branch[i][j] == 0):
                ming = 100000
                for i1 in range(len(branch)):
                    if (branch[i][i1] < ming):
                        if i1 != j:
                            ming = branch[i][i1]
                nul = nul + ming
                minv = 100000
                for i1 in range(len(branch)):
                    if (branch[i1][j] < minv):
                        if i1 != i:
                            minv = branch[i1][j]
                nul = nul + minv
                minv = math.trunc(minv)
                ming = math.trunc(ming)
                if (nul > max):
                    maxpi = i
                    maxpj = j
                    max = nul
                nul = math.trunc(nul)
                print('(', nul, ' ', ming, ' ', minv, ')', end="")
                nul = 0
        print('\n')
    qq = math.trunc(max)
    print('максимальное значение нулевой клетки = ', qq)
    print('i = ', maxpi, ',  j = ', maxpj)

    print('нередуцированная матрица')
    branch[maxpj][maxpi] = ' inf'
    print(branch)
    print('длина изначальной матрицы', end=" ")
    print(len(branch))
    # редукция матрицы
    branch = np.delete(branch, maxpj, axis=1)
    print('прередуцированная матрица')
    print(branch)
    print('\n')
    print('редуцированная матрица')
    print('\n')
    branch = np.delete(branch, maxpi, axis=0)
    print(branch)
    print('длина редуцированной матрицы', end=" ")
    print(len(branch))
    minhor.clear()
    minver.clear()

    localbound_change = 0
    # поиск минимума в редуциорованной матрице
    # минимум строки
    for i in range(len(branch)):
        for j in range(len(branch)):
            print(' ', branch[i][j], end="")
        minh = 1000000
        for i1 in range(len(branch)):
            if (branch[i][i1] < minh):
                minh = branch[i][i1]
        minhor.append(minh)
        localbound_change = localbound_change + minh

        print(' |  min = ', minh, end="")
        print('\n')
        for i1 in range(len(branch)):
            branch[i][i1]=branch[i][i1]-minh

    print('полуУпрощенная матрица')
    print(branch)



    # минимум столбца
    for i in range(len(branch)):
        minv = 1000000
        for j in range(len(branch)):
            if (branch[j][i] < minv):
                minv = branch[j][i]
        minver.append(minv)
        localbound_change = localbound + minv
        q = (minv)
        print(' ', q, end="")
    print('\n')

    print('Упрощенная матрица')
    for i in range(len(branch)):
        for j in range(len(branch)):
            branch[j][i] = branch[j][i] - minver[i]
    print(branch)


    print('локальная нижняя граница для ветви - включения')
    qq = math.trunc(localbound_change)
    print(qq)
    print('локальная нижняя граница для ветви - не включения')
    localbound_not_change = localbound + max
    qq = math.trunc(localbound_not_change)
    print(qq)

    branch_change = branch.copy()

    # до этого было корневое решение. Теперь будет огромный цикл решения дальнейшего. как говорил кизару - это п..ц

    print('начало циклического решения')
    flag = 0
    while (True):
        if flag == 1:
            break
        print(branch_not_change, '\n')
        print('(not change) cost = ', localbound_not_change, '\n')
        print(branch_change, '\n')
        print('(change) cost = ', localbound_change, '\n')

        if localbound_change < localbound_not_change:
            # поиск нулевых клеток
            nul = 0
            max = 0
            for i in range(len(branch_change)):
                for j in range(len(branch_change)):
                    if i != j:
                        qq = (branch_change[i][j])
                        print(' ', qq, end="")
                    else:
                        print(' inf', end="")
                    if (branch_change[i][j] == 0):
                        ming = 100000
                        for i1 in range(len(branch_change)):
                            if (branch_change[i][i1] < ming):
                                if i1 != j:
                                    ming = branch_change[i][i1]
                        nul = nul + ming
                        minv = 100000
                        for i1 in range(len(branch_change)):
                            if (branch_change[i1][j] < minv):
                                if i1 != i:
                                    minv = branch_change[i1][j]
                        nul = nul + minv
                        minv = math.trunc(minv)
                        ming = math.trunc(ming)
                        if (nul > max):
                            maxpi = i
                            maxpj = j
                            max = nul
                        nul = math.trunc(nul)
                        print('(', nul, ' ', ming, ' ', minv, ')', end="")
                        nul = 0
                print('\n')
            qq = (max)
            print('максимальное значение нулевой клетки = ', qq)
            print('i = ', maxpi, ',  j = ', maxpj)
            minchange = localbound_change + qq
            print('не включение ', minchange)

            print('нередуцированная матрица')
            branch[maxpj][maxpi] = ' inf'
            print(branch)
            print('длина изначальной матрицы', end=" ")
            print(len(branch))
            # редукция матрицы
            branch = np.delete(branch, maxpj, axis=1)
            print('прередуцированная матрица')
            print(branch)
            print('\n')
            print('редуцированная матрица')
            print('\n')
            branch = np.delete(branch, maxpi, axis=0)
            print(branch)
            print('длина редуцированной матрицы', end=" ")
            print(len(branch))
            minhor.clear()
            minver.clear()

            # поиск минимума в редуциорованной матрице
            # минимум строки
            for i in range(len(branch)):
                for j in range(len(branch)):
                    print(' ', branch[i][j], end="")
                minh = 1000000
                for i1 in range(len(branch)):
                    if (branch[i][i1] < minh):
                        minh = branch[i][i1]
                minhor.append(minh)
                localbound_change = localbound_change + minh

                print(' |  min = ', minh, end="")
                print('\n')
                for i1 in range(len(branch)):
                    branch[i][i1] = branch[i][i1] - minh

            print('полуУпрощенная матрица')
            print(branch)

            # минимум столбца
            for i in range(len(branch)):
                minv = 1000000
                for j in range(len(branch)):
                    if (branch[j][i] < minv):
                        minv = branch[j][i]
                minver.append(minv)
                localbound_change = localbound + minv
                q = (minv)
                print(' ', q, end="")
            print('\n')

            print('Упрощенная матрица')
            for i in range(len(branch)):
                for j in range(len(branch)):
                    branch[j][i] = branch[j][i] - minver[i]
            print(branch)

            print(localbound_change)
            print(minchange)

            if localbound_change < minchange:
                minchange = localbound_change
            print('минимум в изменении = ', minchange)



        flag = 1


def enter_koordinat():
    global x
    global y
    global counter

    children = Toplevel(root)
    children.title("Ввод координат")
    children.geometry("250x175")

    label_koord = Label(children, text="Введите координаты")
    label_koord.pack()

    label2 = Label(children, text="Координата x")
    label2.pack()

    x = Entry(children)
    x.pack()

    label3 = Label(children, text="Координата y")
    label3.pack()

    y = Entry(children)

    y.pack()
    btn1 = Button(children, text="Принять", command=teget).place(x=95, y=110)
    btn2 = Button(children, text="Закрыть", command=children.destroy).place(x=180, y=130)


root = Tk()
root.geometry("800x650")
root.title("Основная программа")

canv = Canvas(root, width=1000, height=1000, bg="white")  # создаем оси графика координатной плоскости
canv.create_line(500, 1000, 500, 0, width=2, arrow=LAST)
canv.create_line(0, 400, 1000, 400, width=2, arrow=LAST)

# canv.create_line(z_koor[0] + 0.5, w_koor[0] - 0.5, z_koor[1] + 0.5, w_koor[1] - 0.5)

# Параметрами метода create_line() являются координаты x и y, которые обозначают стартовые и конечные точки линии.

btn1 = Button(root, text="Ввод координат", font='Times 12', width=20, height=2, command=enter_koordinat)
btn1.pack()
btn_enter = Button(root, text="Загрузка из excel", font='Times 12', width=20, height=2, command=csv_read)
btn_enter.pack()
btn_clear = Button(root, text="Очистить поле", font='Times 15', height=2, width=15, command=deleting).place(x=20, y=480)

btn_line = Button(root, text="Линейное соединение массива", font='Times 13', height=2, width=25, command=lining).place(
    x=20, y=130)

btn_nightboard = Button(root, text="Метод ближайшего соседа", font='Times 13', height=2, width=25,
                        command=nearest).place(x=20, y=200)

btn_branch = Button(root, text="Метод ветвей и границ", font='Times 13', height=2, width=25,
                    command=branch_and_bound).place(x=20, y=270)

Label(root, text="x").place(x=5, y=10)
x_label = Label(root)
x_label.place(x=55, y=10)
x_label.config(text="")

Label(root, text="y").place(x=5, y=30)
y_label = Label(root)
y_label.place(x=55, y=30)
y_label.config(text="")

Label(root, text="counter").place(x=5, y=50)
z_label = Label(root)
z_label.place(x=55, y=50)
z_label.config(text="0")

Label(root, text="Длина линейной связи:").place(x=5, y=620)
lenline_label = Label(root)
lenline_label.place(x=215, y=620)
lenline_label.config(text=" ")

Label(root, text="Длина метода ветвей и границ:").place(x=5, y=600)
branchline_label = Label(root)
branchline_label.place(x=215, y=600)
branchline_label.config(text=" ")

testline_label = Label(root, text="Длина метода ближайшего соседа: ").place(x=5, y=580)
testline_label = Label(root)
testline_label.place(x=215, y=580)
testline_label.config(text=" ")

Label(root, text="Количество элементов ").place(x=5, y=560)
line_label = Label(root)
line_label.place(x=155, y=560)
line_label.config(text="0")

quitButton = Button(root, text="Закрыть окно", font='Times 13', height=2, width=15, command=quit)
quitButton.place(x=1200, y=10)
canv.pack()
root.mainloop()

from tkinter import *
from math import sqrt
from tkinter.filedialog import askopenfilename
import csv
import numpy as np
x_koor = []
y_koor = []
labx = []
laby = []
counter = 0
points_counter = 0
line_counter = 0
tl = 0
tln = 0
bln = 0
v=""

def teget():
    global x
    global y
    global counter
    x_koor.append(int(x.get())+500)
    y_koor.append(400 - int(y.get()))
    labx.append(int(x.get()))
    laby.append(int(y.get()))
    counter = counter + 1

    x_label.config(text= labx)
    y_label.config(text= laby)
    z_label.config(text=counter)
    if counter > 0:
        canv.create_oval(x_koor[counter - 1] + 1, y_koor[counter - 1] - 1, x_koor[counter - 1] + 1, y_koor[counter - 1] - 1,
                         outline="black", fill="blue", width=2)
    line = canv.find_all()
    line_label.config(text=line)


def csv_read():
 global x
 global y
 global counter
 csv_file_path = askopenfilename()
 with open(csv_file_path) as f:
  reader = csv.reader(f, delimiter="\t")
  for i, line in enumerate(reader):
   print ('line[{}] = {}'.format(i, line))
   x_koor.append(int(line[0]) + 500)
   y_koor.append(400 - int(line[1]))
   labx.append(int(line[0]))
   laby.append(int(line[1]))
   counter = counter + 1
   canv.create_oval(x_koor[counter - 1] + 1, y_koor[counter - 1] - 1, x_koor[counter - 1] + 1, y_koor[counter - 1] - 1,
                    outline="black", fill="blue", width=2)
 x_label.config(text=labx)
 y_label.config(text=laby)
 z_label.config(text=counter)
 line = canv.find_all()
 line_label.config(text=line)

def deleting(): #удаление значений массива, нарисованных линий, обнуление counter'a
    global counter
    global line
    global x_koor
    global y_koor
    counter = 0
    x_koor.clear()
    y_koor.clear()
    line = canv.find_all()
    for i in range(2, len(line)):
        canv.delete(line[i])

    z_label.config(text="0")
    y_label.config(text="")
    x_label.config(text="")
    lenline_label.config(text=" ")
    testline_label.config(text=" ")
    branchline_label.config(text=" ")

def lining(): #функия нахождение длины линии и создание линейной последовательности линий между точками
    global counter
    global tl
    global line
    global points_counter
    tl = 0
    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1, y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)


    for points_counter in range(0, counter-1):
        canv.create_line(x_koor[points_counter], y_koor[points_counter], x_koor[points_counter+1], y_koor[points_counter+1])

        tl =  tl + sqrt((x_koor[points_counter] - x_koor[points_counter+1]) * (x_koor[points_counter] - x_koor[points_counter+1]) +
                    (y_koor[points_counter] - y_koor[points_counter+1]) * (y_koor[points_counter] - y_koor[points_counter+1]))
    tl = tl + sqrt((x_koor[counter - 1] - x_koor[0]) * (x_koor[counter - 1] - x_koor[0]) +
                   (y_koor[counter - 1] - y_koor[0]) * (y_koor[counter - 1] - y_koor[0]))
    canv.create_line(x_koor[counter - 1], y_koor[counter - 1], x_koor[0], y_koor[0])

    line = canv.find_all()
    lenline_label.config(text=tl)
    line_label.config(text=line)


def nearest():

    global line
    global tln
    tln = 0
    global counter
    graph = []
    min = 1000000
    min_point = 0
    binar_counter = 0
    global length_nearest
    binar = []
    for i in range(counter):
        binar.append(0)
    binar[0] = 1
    print('бинар ', binar)

    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1, y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)

    for z in range(0,len(binar)):
        for i in range(0, len(binar)):
                graph.append(sqrt((x_koor[binar_counter] - x_koor[i])**2 + (y_koor[binar_counter] - y_koor[i])**2))

        print('графы ', graph)
        print('бинар ', binar)
        for j in range(0, len(graph)):
            if graph[j] < min:
                if binar[j] == 0:
                    min_point = j
                    min = graph[j]
        tln = tln + min
        canv.create_line(x_koor[min_point], y_koor[min_point], x_koor[binar_counter], y_koor[binar_counter], fill='red', width=1)
        print('min = ', min)
        print('min_point = ', min_point)
        binar[min_point] = 1
        print('длина ', tln)

        binar_counter = min_point
        graph.clear()
        min = 1000000

    tln = tln + (sqrt((x_koor[binar_counter] - x_koor[0])**2 + (y_koor[binar_counter] - y_koor[0])**2))
    canv.create_line((x_koor[0], y_koor[0], x_koor[binar_counter], y_koor[binar_counter]), fill='red', width=1)
    tln = tln - 1000000
    print('длина ', tln)

    line = canv.find_all()
    testline_label.config(text=tln)

def branch_and_bound():

    global counter

    rowNums = 0
    colNums = 0
    x_koor1 = []
    y_koor1 = []
    for i in range(counter):
        x_koor1.append(x_koor[i])
        y_koor1.append(y_koor[i])

    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor1[points_counter] + 1, y_koor1[points_counter] - 1, x_koor1[points_counter] + 1, y_koor1[points_counter] - 1,
                             outline="black", fill="blue", width=2)


    result=[[],[]]
    result[0].append(x_koor1[0])
    result[1].append(y_koor1[0])
    print('координаты точек ', x_koor1, y_koor1)
    for i in range(counter-1):
        branch = enterMatrix(x_koor1,y_koor1)
        print(branch)
        branch, sumOfRowReduction = rowReduction(branch)
        branch, sumOfColReduction = colReduction(branch)
        print(branch)
        cost0 = sum(sumOfColReduction) + sum(sumOfRowReduction)
        print('итоговый минимум стартовой точки ', cost0)
        costBound = lowerBound(branch)
        print('цена ветви',costBound)
        costEdge = Edge(branch)
        print('цена узла',costEdge)
        point = findMinCost(costEdge, costBound, cost0)
        print(point)
        #print(x_koor1, y_koor1)
        x_koor1, y_koor1 = recWay(result, point, x_koor1, y_koor1)
        print(x_koor1, y_koor1)
        #print('координаты пути ',result)
        #print(result[0])
        #print(result[1])
    result[0].append(x_koor1[0])
    result[1].append(y_koor1[0])
    tl=0
    for points_counter in range(len(result[0])-1):
        tl = tl + sqrt((result[0][points_counter] - result[0][points_counter + 1]) *
                       (result[0][points_counter] - result[0][points_counter + 1]) +
                       (result[1][points_counter] - result[1][points_counter + 1]) *
                       (result[1][points_counter] - result[1][points_counter + 1]))
        canv.create_line(result[0][points_counter], result[1][points_counter], result[0][points_counter+1], result[1][points_counter+1])
    tl = tl + sqrt((result[0][len(result[0]) - 1] - result[0][0]) * (result[0][len(result[0]) - 1] - result[0][0]) +
                   (result[1][len(result[0]) - 1] - result[1][0]) * (result[1][len(result[0]) - 1] - result[1][0]))
    canv.create_line(result[0][len(result[0]) - 1], result[1][len(result[0]) - 1], result[0][0], result[1][0])
    print(tl)
    branchline_label.config(text=tl)



def enterMatrix(x_koor1,y_koor1):
    """
    заполение массива расстояний на основе координат

    :return:
    """
    branch = np.zeros([len(x_koor1), len(x_koor1)])  # Шаблон матрицы
    # относительных расстояний между пунктами
    for i in np.arange(0, len(x_koor1), 1):
        for j in np.arange(0, len(x_koor1), 1):
            if i != j:
                branch[i, j] = sqrt((x_koor1[i] - x_koor1[j])** 2
                                       + (y_koor1[i] - y_koor1[j]) ** 2)
                   # Заполнение матрицы
            else:
                branch[i, j] = float('inf')  # Заполнение главной
                   # диагонали матрицы
    return branch




def findSmallestElementInRow(array, row):
    """
    Поиск наименьшего значение в СТРОКЕ
    :param  array:
    :param  row:
    :return: минимальный элемент
    """
    #minElement = root.winfo_width()
    minElement = 100000
    for element in array[row]:
        # print(element)
        if minElement > element:
            minElement = element
    if minElement == 100000:
        minElement=0
    return minElement

def findSmallestElementInCol(array, col):
    """
    Поиск наименьшего значение в СТОЛБЦЕ
    :param array:
    :param col:
    :return: минимальный элемент
    """
    minElement = 100000
    for element in array[:, col]:
        if minElement > element:
            minElement = element
    if minElement == 100000:
        minElement=0
    return minElement


def rowReduction(array):
    """
    Редукция строк
    :param array:
    :return:
    """
    rowCoefficients = []
    for i in range(len(array)):
        #   print(array[i])
        minElement = findSmallestElementInRow(array, i)
        rowCoefficients.append(minElement)
        for j in range(len(array[i])):
            array[i][j] -= minElement
    return array, rowCoefficients
def colReduction(array):
    """
    Редукция столбцов
    :param array:
    :return:
    """
    colCoefficients = []
    for i in range(len(array)):
        minElement = findSmallestElementInCol(array, i)
        colCoefficients.append(minElement)
        for j in range(len(array[:, i])):
            array[j][i] -= minElement
    return array, colCoefficients

def lowerBound(array):
    """

    :param array:
    :return:
    """
    costBound = []  # Массив стоимости ветви от исходной точки
    for i in range(1, len(array)):
        newMatrix = array.copy()
        for j in range(len(newMatrix[:, i])):
            newMatrix[j][i] = float("inf")
        print(newMatrix)
        newMatrix, sumOfRowReduction = rowReduction(newMatrix)
        newMatrix, sumOfColReduction = colReduction(newMatrix)
        costBound.append(sum(sumOfColReduction) + sum(sumOfRowReduction))
    return costBound

def Edge(array):
    """

    :param array:
    :return:
    """
    costEdge = []  # Массив стоимости следующих узлов
    j=0
    for i in range(1, len(array)):
        newMatrix = array.copy()
        costEdge.append(newMatrix[i][j])
    return costEdge
def findMinCost(arrayEdge, arrayBound, costStart):
    """
    Поиск кратчайшей стоимости
    :param arrayEdge: стоимость узла
    :param arrayBound: стоимость ветви
    :param costStart: стоимость начальной точки
    :return:
    """
    cost=[]
    for i in range(len(arrayEdge)):
        cost.append(arrayEdge[i] + arrayBound[i] + costStart)
    print(cost)
    ind = cost.index(min(cost))
    return ind


def recWay(way,point, x,y):
    """
    заносим в массив координат путей очередную координату пути
    удаляем сам путь
    :param way:
    :return
    """
    way[0].append(x[0])
    way[1].append(y[0])

    del x[0]
    del y[0]
    x_point = x[point]
    y_point = y[point]
    del x[point]
    del y[point]
    x.insert(0,x_point)
    y.insert(0,y_point)
    return x,y



def enter_koordinat():
    global x
    global y
    global counter

    children = Toplevel(root)
    children.title("Ввод координат")
    children.geometry("250x175")

    label_koord = Label(children, text="Введите координаты")
    label_koord.pack()

    label2 = Label(children, text="Координата x")
    label2.pack()

    x = Entry(children)
    x.pack()

    label3 = Label(children, text="Координата y")
    label3.pack()

    y = Entry(children)


    y.pack()
    btn1 = Button(children, text="Принять", command=teget).place(x=95, y=110)
    btn2 = Button(children, text="Закрыть", command=children.destroy).place(x=180, y=130)


root = Tk()
root.geometry("800x650")
root.title("Основная программа")

canv = Canvas(root, width=1000, height=1000, bg="white")  # создаем оси графика координатной плоскости
canv.create_line(500, 1000, 500, 0, width=2, arrow=LAST)
canv.create_line(0, 400, 1000, 400, width=2, arrow=LAST)


#canv.create_line(z_koor[0] + 0.5, w_koor[0] - 0.5, z_koor[1] + 0.5, w_koor[1] - 0.5)

 # Параметрами метода create_line() являются координаты x и y, которые обозначают стартовые и конечные точки линии.

btn1 = Button(root, text="Ввод координат", font='Times 12',width=20,height=2, command=enter_koordinat)
btn1.pack()
btn_enter = Button(root, text="Загрузка из excel", font='Times 12',width=20,height=2, command=csv_read)
btn_enter.pack()
btn_clear = Button(root, text="Очистить поле", font='Times 15', height=2,width=15, command=deleting).place(x=20, y=480)

btn_line = Button(root, text="Линейное соединение массива", font='Times 13',height=2,width=25, command=lining).place(x=20, y=130)

btn_nightboard = Button(root, text="Метод ближайшего соседа", font='Times 13',height=2,width=25, command = nearest).place(x=20, y=200)

btn_branch = Button(root, text="Метод ветвей и границ", font='Times 13', height=2,width=25, command = branch_and_bound).place(x=20, y=270)



Label(root, text="x").place(x=5, y=10)
x_label = Label(root)
x_label.place(x=55, y=10)
x_label.config(text="")

Label(root, text="y").place(x=5, y=30)
y_label = Label(root)
y_label.place(x=55, y=30)
y_label.config(text="")

Label(root, text="counter").place(x=5, y=50)
z_label = Label(root)
z_label.place(x=55, y=50)
z_label.config(text="0")

Label(root, text="Длина линейной связи:").place(x=5,y=620)
lenline_label = Label(root)
lenline_label.place(x=215, y=620)
lenline_label.config(text=" ")

Label(root, text="Длина метода ветвей и границ:").place(x=5,y=600)
branchline_label = Label(root)
branchline_label.place(x=215, y=600)
branchline_label.config(text=" ")

testline_label = Label(root,text="Длина метода ближайшего соседа: ").place(x=5,y=580)
testline_label = Label(root)
testline_label.place(x=215, y=580)
testline_label.config(text=" ")

Label(root,text="Количество элементов ").place(x=5,y=560)
line_label = Label(root)
line_label.place(x=155, y=560)
line_label.config(text="0")


quitButton = Button(root, text="Закрыть окно", font='Times 13', height=2,width=15, command=quit)
quitButton.place(x=1200, y=10)
canv.pack()
root.mainloop()

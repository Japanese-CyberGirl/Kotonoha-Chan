from tkinter import *
from math import sqrt
x_koor = []
y_koor = []
labx = []
laby = []
counter = 0
points_counter = 0
line_counter = 0
lineline_counter = 0
tl = 0
tln = 0
bln = 0

def teget():
    global x
    global y
    global counter
    x_koor.append(int(x.get())+500)
    y_koor.append(400 - int(y.get()))
    labx.append(int(x.get()))
    laby.append(int(y.get()))
    counter = counter + 1

    x_label.config(text= labx)
    y_label.config(text= laby)
    z_label.config(text=counter)
    if counter > 0:
        canv.create_oval(x_koor[counter - 1] + 1, y_koor[counter - 1] - 1, x_koor[counter - 1] + 1, y_koor[counter - 1] - 1,
                         outline="black", fill="blue", width=2)
    line = canv.find_all()
    line_label.config(text=line)

def deleting(): #удаление значений массива, нарисованных линий, обнуление counter'a
    global counter
    global lineline_counter
    global tl
    global line
    global x_koor
    global y_koor
    counter = 0
    lineline_counter = 0
    tl = 0
    x_koor.clear()
    y_koor.clear()
    line = canv.find_all()
    for i in range(2, len(line)):
        canv.delete(line[i])

    z_label.config(text="0")
    y_label.config(text="")
    x_label.config(text="")
    lenline_label.config(text=" ")


def lining(): #функия нахождение длины линии и создание линейной последовательности линий между точками
    global lineline_counter
    global counter
    global tl
    global line
    global points_counter
    tl = 0
    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1, y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)


    for points_counter in range(0, counter-1):
        canv.create_line(x_koor[points_counter], y_koor[points_counter], x_koor[points_counter+1], y_koor[points_counter+1])

        tl =  tl + sqrt((x_koor[points_counter] - x_koor[points_counter+1]) * (x_koor[points_counter] - x_koor[points_counter+1]) +
                    (y_koor[points_counter] - y_koor[points_counter+1]) * (y_koor[points_counter] - y_koor[points_counter+1]))
    tl = tl + sqrt((x_koor[counter - 1] - x_koor[0]) * (x_koor[counter - 1] - x_koor[0]) +
                   (y_koor[counter - 1] - y_koor[0]) * (y_koor[counter - 1] - y_koor[0]))
    canv.create_line(x_koor[counter - 1], y_koor[counter - 1], x_koor[0], y_koor[0])




    line = canv.find_all()
    lenline_label.config(text=tl)
    line_label.config(text=line)


def nearest():

    global line
    global tln
    tln = 0
    global counter
    graph = []
    min = 1000000
    min_point = 0
    binar_counter = 0
    global length_nearest
    binar = []
    for i in range(counter):
        binar.append(0)
    binar[0] = 1
    print('бинар ', binar)

    line = canv.find_all()
    if len(line) > 2 + counter:
        for i in range(2, len(line)):
            canv.delete(line[i])
        for points_counter in range(0, counter):
            canv.create_oval(x_koor[points_counter] + 1, y_koor[points_counter] - 1, x_koor[points_counter] + 1, y_koor[points_counter] - 1,
                             outline="black", fill="blue", width=2)

    for z in range(0,len(binar)):
        for i in range(0, len(binar)):
                graph.append(sqrt((x_koor[binar_counter] - x_koor[i])**2 + (y_koor[binar_counter] - y_koor[i])**2))

        print('графы ', graph)
        print('бинар ', binar)
        for j in range(0, len(graph)):
            if graph[j] < min:
                if binar[j] == 0:
                    min_point = j
                    min = graph[j]
        tln = tln + min
        canv.create_line(x_koor[min_point], y_koor[min_point], x_koor[binar_counter], y_koor[binar_counter], fill='red', width=1)
        print('min = ', min)
        print('min_point = ', min_point)
        binar[min_point] = 1
        print('длина ', tln)

        binar_counter = min_point
        graph.clear()
        min = 1000000

    tln = tln + (sqrt((x_koor[binar_counter] - x_koor[0])**2 + (y_koor[binar_counter] - y_koor[0])**2))
    canv.create_line((x_koor[0], y_koor[0], x_koor[binar_counter], y_koor[binar_counter]), fill='red', width=1)
    tln = tln - 1000000
    print('длина ', tln)

    line = canv.find_all()

    testline_label.config(text=tln)

def branch_and_bound():
    global counter
    min_point = 0
    global bln
    x_koor1=[counter]
    y_koor1=[counter]
    min_masx = []
    min_masy=[]
    min_masx.append(x_koor[0])
    min_masy.append(y_koor[0])
    binar_counter = 0
    binar = []
    for i in range(counter):
        binar.append(0)
    binar[0] = 1
    branch_graph = []
    branch_value = 0
    for i in range(counter):
        branch_graph.append(0)
    branch = [0] * len(binar)
    for i in range(len(binar)):
        branch[i] = [0] * counter
    #делаем функциональный вспомогательный массив координат х и у
    for i in range(counter):
        x_koor1[i] = x_koor[i]
        y_koor1[i] = y_koor[i]


    for i100 in range((counter)-1):
        print('начинается игра, я открываю тетрадь смерти')
        print('binar = ', len(binar))

        branch = [0] * len(binar)
        for i in range(len(binar)):
            branch[i] = [0] * counter

        for a in range(len(binar)):
            for b in range(len(binar)):
                branch[a][b] = sqrt((x_koor1[a] - x_koor1[b]) ** 2 + (y_koor1[a] - y_koor1[b]) ** 2)  # создание стартовой матрицы

        print('СРАВНЕНИЕ ДЛИНЫ БИНАРА И БРЭНЧА', len(binar), len(branch))

        for i in range(len(binar)):
            print(branch[i])

        for i in range(len(binar)):
            min = 100000
            for i1 in range(len(binar)):
                if i != i1:
                    if branch[i][i1] < min:
                        min = branch[i][i1]  # поиск минимального значения в строке
            print('min ', min)
            branch_value = branch_value + min  # суммируем минимальные значения строк
            print('минимум точки ', branch_value)

            for i1 in range(len(branch)):
                if i != i1:
                    branch[i][i1] = branch[i][i1] - min  # отнимаем минимальное значение строки из всех элементов строки

        print('новый массив будущих линий')
        for i in range(len(branch)):
            print(branch[i])

        for i in range(len(branch)):
            min = 100000
            for i1 in range(len(branch)):
                if i != i1:
                    if branch[i1][i] < min:  # находим минимальные значения столбцов
                        min = branch[i1][i]
            print('min ', min)
            branch_value = branch_value + min  # суммируем значения столбцов со строками (из предыдущего цикла)
            print('минимум точки ', branch_value)

        print('итоговый минимум стартовой точки ', branch_value)
        for i in range(len(branch)):
            print(branch[i])

        for i in range(1, len(branch)):
            min = 10000
            for i1 in range(len(branch)):
                if i1 != i:
                    if branch[i1][0] < min:  # в этом цикле мы ищем расстояния до остальных точек
                        min = branch[i1][0]
            min = min + branch[0][i] + branch_value  # складываем вес искомой матрицы, путь до точки i и минимальный элемент из столбца (там короче как на этом сайте было, так и делается, я проверял, все норм вроде)
            branch_graph[i] = min
            print('минимальная первого столбца: ', min)

        for i in range(len(branch)):
            print(branch_graph[i])  # вывожу для проверки массив с расстояниями до точек

        min = 10000
        for i in range(len(branch)):
            if branch_graph[i] < min:
                if branch_graph[i] != 0:  # нахожу минимальную точку, фиксирую ее номер,прибавляю к маршруту расстояние до нее
                    min = branch_graph[i]
                    binar_counter = i
        # вот здесь вот расстояние считаю

        print('минимум :', min)
        print('новая точка индекс ', binar_counter)
        print('длина бинара ', len(binar))
        print('а вот и сам этот бинар ')
        for i in range (len(binar)):
            print(binar[i])
        binar[binar_counter] = 1

        print('с новой точкой бинар')
        for i in range (len(binar)):
            print(binar[i])

        min_masx.append(x_koor1[binar_counter])
        min_masy.append(y_koor1[binar_counter])
        binar.pop(min_point)
        y_koor1.pop(min_point)
        x_koor1.pop(min_point)

        print('binar: ')
        for i in range(len(binar)):
            print(binar[i])

        print('x_koor: ')
        for i in range(len(binar)):
            print(x_koor1[i])

        print('next')

        for i in range(len(min_masx)):
            print(min_masx[i])

        max = -1
        for i in range(len(binar)):
            if binar[i] > max:
                max = binar[i]
                binar_reloader = i

        print('binar: ')
        for i in range(len(binar)):
            print(binar[i])

        print('max = ', max)
        print('binar_reloader = ', binar_reloader)

        xkop = x_koor1[0]
        ykop = y_koor1[0]
        x_koor1[0] = x_koor1[binar_reloader]
        y_koor1[0] = y_koor1[binar_reloader]
        x_koor1[binar_reloader] = xkop
        y_koor1[binar_reloader] = ykop

        binar[0] = binar[binar_reloader]
        binar[binar_reloader] = 0

        print('бинчик новый ')
        for i in range(len(binar)):
            print(binar[i])
        print('новый массив епт ')
        for i in range(len(binar)):
            print(x_koor1[i])

        branch.clear()
    print('длина массива новых координат = ', len(min_masx))
    for i in range(len(min_masx)-1):
        canv.create_line((min_masx[i], min_masy[i], min_masx[i+1], min_masy[i+1]), fill='green', width=1)
    canv.create_line((min_masx[0], min_masy[0], min_masx[len(min_masx)-1], min_masy[len(min_masx)-1]), fill='green', width=1)



def enter_koordinat():
    global x
    global y
    global counter

    children = Toplevel(root)
    children.title("Ввод координат")
    children.geometry("250x175")

    label1 = Label(children, text="Введите координаты")
    label1.pack()

    label2 = Label(children, text="Координата x")
    label2.pack()

    x = Entry(children)
    x.pack()

    label3 = Label(children, text="Координата y")
    label3.pack()

    y = Entry(children)


    y.pack()
    btn1 = Button(children, text="Принять", command=teget).place(x=95, y=110)
    btn2 = Button(children, text="Закрыть", command=children.destroy).place(x=180, y=130)


root = Tk()
root.geometry("800x650")
root.title("Основная программа")

canv = Canvas(root, width=1000, height=1000, bg="white")  # создаем оси графика координатной плоскости
canv.create_line(500, 1000, 500, 0, width=2, arrow=LAST)
canv.create_line(0, 400, 1000, 400, width=2, arrow=LAST)


#canv.create_line(z_koor[0] + 0.5, w_koor[0] - 0.5, z_koor[1] + 0.5, w_koor[1] - 0.5)

 # Параметрами метода create_line() являются координаты x и y, которые обозначают стартовые и конечные точки линии.

btn1 = Button(root, text="Ввод координат", command=enter_koordinat)
btn1.pack()

btn2 = Button(root, text="Очистить поле", command=deleting).place(x=30, y=510)

btn3 = Button(root, text="Линейное соединение массива", command=lining).place(x=30, y=130)

btn4 = Button(root, text="Метод ближайшего соседа", command = nearest).place(x=30, y=165)

btn5 = Button(root, text="Метод ветвей и границ", command = branch_and_bound).place(x=30, y=200)



Label(root, text="x").place(x=5, y=10)
x_label = Label(root)
x_label.place(x=55, y=10)
x_label.config(text="")

Label(root, text="y").place(x=5, y=30)
y_label = Label(root)
y_label.place(x=55, y=30)
y_label.config(text="")

Label(root, text="counter").place(x=5, y=50)
z_label = Label(root)
z_label.place(x=55, y=50)
z_label.config(text="0")

Label(root, text="Длина линейной связи:").place(x=5,y=620)
lenline_label = Label(root)
lenline_label.place(x=215, y=620)
lenline_label.config(text=" ")

Label(root, text="Длина метода ветвей и границ:").place(x=5,y=600)


testline_label = Label(root,text="Длина метода ближайшего соседа: ").place(x=5,y=580)
testline_label = Label(root)
testline_label.place(x=215, y=580)
testline_label.config(text=" ")

Label(root,text="Количество элементов ").place(x=5,y=560)
line_label = Label(root)
line_label.place(x=155, y=560)
line_label.config(text="0")


quitButton = Button(root, text="Закрыть окно", command=quit)
quitButton.place(x=1200, y=0)
canv.pack()
root.mainloop()
